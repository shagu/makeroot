#!/bin/bash

function progress {
  echo -n "-> $1"
}

function log {
  if [ ! -n "${VERBOSE}" ]; then
    tee -a $LOG_DIR/$1.log >> $LOG_DIR/makeroot.log
  else
    tee -a $LOG_DIR/$1.log | tee -a $LOG_DIR/makeroot.log
  fi
}

function run {
  progress "$1 "

  trap "echo -e '[\033[91;1mERROR\033[0m]\033[2m'; tail $LOG_DIR/$1.log; echo -e '\033[0m'; exit 1" ERR
  tbegin=$(date +%s)
  $1 2>&1 | log $1 ; test ${PIPESTATUS[0]} -eq 0
  duration=$(expr $(date +%s) - $tbegin || true)

  if [ "$duration" = "0" ]; then
    echo
  else
    echo "[$duration seconds]"
  fi
}

function do_files {
  for file in $FILES; do
    mkdir -p $ROOTFS_DIR/var/files
    if [ -f recipes/$RECIPE/files/$file ]; then
      cp -Rv recipes/$RECIPE/files/$file $ROOTFS_DIR/var/files | log do_files
    elif [ -f $file ]; then
      cp -Rv $file $ROOTFS_DIR/var/files | log do_files
    else
      echo "WARNING: $file not found."
    fi
  done
}

function do_container {
  # create container metadata
  echo "lxc.include = /usr/share/lxc/config/common.conf" > ${TARGET_DIR}/config
  echo "lxc.rootfs.path = dir:/var/lib/lxc/${RECIPE}/rootfs" >> ${TARGET_DIR}/config
  echo "lxc.uts.name = $RECIPE" >> ${TARGET_DIR}/config
  echo "lxc.arch = amd64" >> ${TARGET_DIR}/config
  echo "lxc.net.0.type = none" >> ${TARGET_DIR}/config

  # launch the container
  container_start

  # copy resolv.conf into rootfs
  rm -f ${ROOTFS_DIR}/etc/resolv.conf
  cp -L /etc/resolv.conf ${ROOTFS_DIR}/etc/resolv.conf
}

function container_start {
  if [ "$CONTAINER_BACKEND" = "lxc" ]; then
    # start the container
    lxc-start -n ${RECIPE} -P ${BASE_DIR}/${BUILD_DIR} -s lxc.rootfs.path=${BASE_DIR}/${ROOTFS_DIR} -l DEBUG
  elif [ "$CONTAINER_BACKEND" = "chroot" ]; then
    # prepare the container
    mount -t devtmpfs none $ROOTFS_DIR/dev
    mount -t sysfs    none $ROOTFS_DIR/sys
    mount -t tmpfs    none $ROOTFS_DIR/tmp
    mount -t proc     none $ROOTFS_DIR/proc
  else
    echo "Unknown container backend \"$CONTAINER_BACKEND\""
    exit 1
  fi
}

function container_stop {
  if [ "$CONTAINER_BACKEND" = "lxc" ]; then
    lxc-stop -n ${RECIPE} -P ${BASE_DIR}/${BUILD_DIR}
  elif [ "$CONTAINER_BACKEND" = "chroot" ]; then
    umount -R $ROOTFS_DIR/dev $ROOTFS_DIR/proc $ROOTFS_DIR/sys $ROOTFS_DIR/tmp
  fi
}

function container_run {
  # place function inside rootfs
  declare -f $1 > $ROOTFS_DIR/tmp/$1.sh
  echo $1 >> $ROOTFS_DIR/tmp/$1.sh
  chmod +x $ROOTFS_DIR/tmp/$1.sh

  # set the proper container run command
  if [ "$CONTAINER_BACKEND" = "lxc" ]; then
    export CONTAINER_CMD="lxc-attach -n ${RECIPE} -P ${BASE_DIR}/${BUILD_DIR} --"
  elif [ "$CONTAINER_BACKEND" = "chroot" ]; then
    export CONTAINER_CMD="chroot $ROOTFS_DIR"
  fi

  # convert function to be runnable on host
  eval "function $(echo $1) { $CONTAINER_CMD /bin/bash /tmp/$1.sh; }"

  # run the function
  run $1

  # clean up
  rm -f $ROOTFS_DIR/tmp/$1.sh
}